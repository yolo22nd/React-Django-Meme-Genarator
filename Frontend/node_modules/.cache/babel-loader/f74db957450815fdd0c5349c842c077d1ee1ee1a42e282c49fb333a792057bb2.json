{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\omtan\\\\OneDrive\\\\Desktop\\\\JS\\\\React Django Meme Genarator\\\\React-Django-Meme-Genarator\\\\Frontend\\\\src\\\\utils\\\\PrivateRoutes.js\",\n  _s = $RefreshSig$();\nimport { Navigate, Outlet } from \"react-router-dom\";\nimport { useContext } from \"react\";\nimport AuthContext from \"../context/AuthContext\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PrivateRoutes = (children, ...rest) => {\n  _s();\n  let {\n    user\n  } = useContext(AuthContext);\n  // console.log(\"privvate route works\")\n  return user ? /*#__PURE__*/_jsxDEV(Outlet, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 9,\n    columnNumber: 16\n  }, this) : /*#__PURE__*/_jsxDEV(Navigate, {\n    to: \"/login\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 9,\n    columnNumber: 28\n  }, this);\n};\n\n// const PrivateRoute = () => {\n//     const authenticated = false; // determine if authorized, from context or however you're doing it\n//     // console.log(\"private router called\")\n//     // If authorized, return an outlet that will render child elements\n//     // If not, return element that will navigate to login page\n//     return authenticated ? <Outlet/> : <Navigate to=\"/login\" />;\n// }\n_s(PrivateRoutes, \"JGtbL9nF23m+KDtp3kj55mw9GTc=\");\n_c = PrivateRoutes;\nexport default PrivateRoutes;\nvar _c;\n$RefreshReg$(_c, \"PrivateRoutes\");","map":{"version":3,"names":["Navigate","Outlet","useContext","AuthContext","jsxDEV","_jsxDEV","PrivateRoutes","children","rest","_s","user","fileName","_jsxFileName","lineNumber","columnNumber","to","_c","$RefreshReg$"],"sources":["C:/Users/omtan/OneDrive/Desktop/JS/React Django Meme Genarator/React-Django-Meme-Genarator/Frontend/src/utils/PrivateRoutes.js"],"sourcesContent":["import { Navigate, Outlet } from \"react-router-dom\";\r\nimport { useContext } from \"react\";\r\nimport AuthContext from \"../context/AuthContext\";\r\n\r\nconst PrivateRoutes = (children, ...rest) => {\r\n    let {user} = useContext(AuthContext)\r\n    // console.log(\"privvate route works\")\r\n    return(\r\n        user ? <Outlet/> : <Navigate to=\"/login\" />\r\n    )\r\n}\r\n\r\n\r\n// const PrivateRoute = () => {\r\n//     const authenticated = false; // determine if authorized, from context or however you're doing it\r\n//     // console.log(\"private router called\")\r\n//     // If authorized, return an outlet that will render child elements\r\n//     // If not, return element that will navigate to login page\r\n//     return authenticated ? <Outlet/> : <Navigate to=\"/login\" />;\r\n// }\r\n\r\nexport default PrivateRoutes"],"mappings":";;AAAA,SAASA,QAAQ,EAAEC,MAAM,QAAQ,kBAAkB;AACnD,SAASC,UAAU,QAAQ,OAAO;AAClC,OAAOC,WAAW,MAAM,wBAAwB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEjD,MAAMC,aAAa,GAAGA,CAACC,QAAQ,EAAE,GAAGC,IAAI,KAAK;EAAAC,EAAA;EACzC,IAAI;IAACC;EAAI,CAAC,GAAGR,UAAU,CAACC,WAAW,CAAC;EACpC;EACA,OACIO,IAAI,gBAAGL,OAAA,CAACJ,MAAM;IAAAU,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAC,CAAC,gBAAGT,OAAA,CAACL,QAAQ;IAACe,EAAE,EAAC;EAAQ;IAAAJ,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;AAEnD,CAAC;;AAGD;AACA;AACA;AACA;AACA;AACA;AACA;AAAAL,EAAA,CAfMH,aAAa;AAAAU,EAAA,GAAbV,aAAa;AAiBnB,eAAeA,aAAa;AAAA,IAAAU,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}